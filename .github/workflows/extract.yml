name: Extract Rootfs
on:
  workflow_dispatch:
    inputs:
      rootfs_name:
        description: 'Rootfs Output Name'
        required: true
      fw_link:
        description: 'Insert firmware link (Wget)'
        required: true
      type_file:
        description: "Select type file"
        required: false
        default: "img.gz"
        type: choice
        options:
          - img.xz
          - img.gz
      img_url:
        description: "Set the url img file"
        required: true
      rename_rootfs:
        description: "ganti nama rootfs"
        required: false
        default: ""     
        type: string   

build_ipk:
    permissions:
      contents: write
    name: ULO kernel tes
    runs-on: ubuntu-20.04
    steps:
       - name: Cleanup and Installing Prerequisites
         env:
          DEBIAN_FRONTEND: noninteractive
         run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get -y install lolcat build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo -E apt-get -y install wget python3
          sudo pip3 install gdown
          sudo timedatectl set-timezone "$TZ"
          sudo pip3 install git+https://github.com/Juvenal-Yescas/mediafire-dl
          wget https://mega.nz/linux/repo/xUbuntu_20.04/amd64/megacmd-xUbuntu_20.04_amd64.deb && sudo apt install "$PWD/megacmd-xUbuntu_20.04_amd64.deb"
                    
       - name: Checkout Repository
         uses: actions/checkout@v2
         with:
          ref: ${{ github.ref_name }}

       - name: Mengatur tanggal
         id: date
         run: echo "date=$(date +'%d-%m-%y %H:%M:%S')" >> $GITHUB_OUTPUT
   
       - name: Download file ${{ github.event.inputs.type_file }}
         run: |
           if [ $(echo ${{ github.event.inputs.img_url }} | grep "drive.") ]; then
           if [ $(echo ${{ github.event.inputs.img_url }} | awk -F "/" '{print $6}') ]; then
            link_gdrive=$(echo ${{ github.event.inputs.img_url }} | awk -F "/" '{print $6}')
           else
            link_gdrive=$(echo ${{ github.event.inputs.img_url }} | awk -F "/" '{print $4}' | awk -F "?id=" '{print $2}'|awk -F "&export" '{print $1}')
           fi
           sudo gdown ${link_gdrive} -O $FW_PATH
           else
           if [ $(echo ${{ github.event.inputs.img_url }} | grep "mediafire.com") ]; then
            sudo mediafire-dl ${{ github.event.inputs.img_url }} -o $FW_PATH
            else
            if [ $(echo ${{ github.event.inputs.img_url }} | grep "mega.nz") ]; then
              file_mega=$(sudo mega-get ${{ github.event.inputs.img_url }} | awk -F: '{print $2}')
              sudo mv ${file_mega} $FW_PATH
            else
              sudo wget --no-check-certificate ${{ github.event.inputs.img_url }} -O $FW_PATH
            fi
           fi
           fi
           FW_PATH=$(find ./ -name "*img.*")
           echo "FW_PATH=$FW_PATH" >> $GITHUB_ENV

       - name: Extract Fw
         id: extract_fw
         run: |
          if [[ -z "${{ env.FW_PATH }}" ]]; then
              echo "Firmware path is empty. Exiting."
              exit 1
          fi

          if [[ "${{ env.FW_PATH }}" == *.img.gz ]]; then
              sudo gunzip "${{ env.FW_PATH }}"
              rm -rf ${{ env.FW_PATH }}
          elif [[ "${{ env.FW_PATH }}" == *.img.xz ]]; then
              sudo unxz "${{ env.FW_PATH }}"
              rm -rf ${{ env.FW_PATH }}
          else
              echo "Unsupported file type: ${{ env.FW_PATH }}"
              exit 1
          fi

          EXTRACTED_FW=$(find -name "*.img")
          echo "EXTRACTED_FW=${EXTRACTED_FW}" >> $GITHUB_ENV

       - name: Get Partition Offset
         id: get_offset
         run: |
          fdisk_output=$(fdisk -l "${{ env.EXTRACTED_FW }}")
          echo "$fdisk_output"
          offset=$(echo "$fdisk_output" | grep "${{ env.EXTRACTED_FW }}2" | awk '{print $2}')
          partisi_offset=$((offset * 512))
          echo "partisi_offset=$partisi_offset" >> $GITHUB_ENV

       - name: Mount Image
         run: |
          sudo mkdir -p /mnt/openwrt-rootfs
          sudo mount -o loop,offset=${{ env.partisi_offset }} "${{ env.EXTRACTED_FW }}" /mnt/openwrt-rootfs

       - name: Copy Rootfs
         run: |
          mkdir -p extracted-rootfs
          sudo cp -a /mnt/openwrt-rootfs/. /extracted-rootfs/ > /dev/null 2>&1

       - name: Compress Rootfs
         run: |
          sudo tar -czvf ${{ github.event.inputs.rootfs_name }}_rootfs.tar.gz -C /extracted-rootfs/ . > /dev/null 2>&1

       - name: Umount Rootfs
         run: |
          sudo umount /mnt/openwrt-rootfs

       - name: Upload Rootfs
         uses: softprops/action-gh-release@v2
         env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
         with:
          name: Mutiara-Wrt Rootfs
          tag_name: all
          draft: false
          prerelease: false
          files: ./*.tar.gz
          body: |
              Kumpulan Rootfs
